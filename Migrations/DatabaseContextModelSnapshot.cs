// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SKBookApi.Models;

#nullable disable

namespace SKBookApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("BookVillain", b =>
                {
                    b.Property<int>("booksid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("villainsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("booksid", "villainsid");

                    b.HasIndex("villainsid");

                    b.ToTable("BookVillain");
                });

            modelBuilder.Entity("SKBookApi.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("SKBookApi.Models.Short", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("collectedIn")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("originallyPublishedIn")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Shorts");
                });

            modelBuilder.Entity("SKBookApi.Models.Villain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Villains");
                });

            modelBuilder.Entity("ShortVillain", b =>
                {
                    b.Property<int>("shortsid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("villainsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("shortsid", "villainsid");

                    b.HasIndex("villainsid");

                    b.ToTable("ShortVillain");
                });

            modelBuilder.Entity("BookVillain", b =>
                {
                    b.HasOne("SKBookApi.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKBookApi.Models.Villain", null)
                        .WithMany()
                        .HasForeignKey("villainsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShortVillain", b =>
                {
                    b.HasOne("SKBookApi.Models.Short", null)
                        .WithMany()
                        .HasForeignKey("shortsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKBookApi.Models.Villain", null)
                        .WithMany()
                        .HasForeignKey("villainsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
